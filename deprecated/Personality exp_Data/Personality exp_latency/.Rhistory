#              treat.y, Configuration.y, Color.code.y,
#              stan_nflo.y, stan_nflochang.y, stan_nouts.y, stan_nins.y))%>%
#   group_by(ID..) %>%
#   mutate_all(funs(multmut))
#
# ff$treat.num <- as.numeric(ff$treat) - 1
#
setwd("C:/Users/KWJ/Dropbox/FF_fear and foraging/Personality exp_Data/Personality exp_latency")
lat <- read.csv("latency.csv", sep = ",")
lat <- lat %>% mutate(VideoID = substr(RecID, 38, 60)) %>%
rename(ID.. = NoID)
ff <- ff %>% mutate(VideoID = substr(Video.cut, 38, 60))
ff_lat <- left_join(ff, lat, by = c("VideoID", "ID.."))
cog <- read.csv("C:/Users/KWJ/Dropbox/FF_fear and foraging/Cognition data subset for Kasia sep-17.csv")
cog_means <- cog %>% group_by(ID) %>%
summarise(cog.mean = mean(cog.score)) %>%
rename(ID.. = ID)
pers_means_ctrl <- ff_lat %>%
filter(ConfSimpl == "Ctr") %>%
group_by(ID..) %>%
summarise(fer.mean = mean(mov_feroc),
exp.mean = mean(stan_nflo),
lat.mean = mean(Latency))
cog_pers <- left_join(cog_means, pers_means_ctrl, by = "ID..")
View(cog_means)
write.xlsx(ff, "C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx",
append = TRUE)
library(openxlsx)
write.xlsx(ff, "C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx",
append = TRUE)
write.xlsx(ff_lat, "C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx",
append = TRUE)
cog
library(tidyverse)
library(lmerTest)
library(lme4)
library(smatr)
# Data preparation --------------------------------------------------------
setwd("C:/Users/KWJ/Dropbox/FF_fear and foraging")
ff <- read.csv("persIDc.csv", sep = ";")
ff <- ff %>% mutate(for_eff = tot_durins/tot_durfor,
treat_num = substr(ff$Configuration,
nchar(as.character(ff$Configuration)),
nchar(as.character(ff$Configuration))))
# # ffc <- ff %>% filter(treat == "Ctr") # control set
# # ffe <- ff %>% filter(treat != "Ctr") # experimental set
# #
# # ff_fill <- left_join(ffc, ffe, by = c("ID..", "treat_num") )
#
# multmut <- function (x) {if_else(is.na(x), mean(x, na.rm = TRUE), as.numeric(x))}
#
# ff_fillx <- ff_fill %>%
#   select (-c(Video.cut.x, abs_nflo.x, nflo_chang.x, nouts.x, nouts.x,
#              treat.x, Configuration.x, Color.code.x,
#              stan_nflo.x, stan_nflochang.x, stan_nouts.x, stan_nins.x,
#
#              Video.cut.y, abs_nflo.y, nflo_chang.y, nouts.y, nouts.y,
#              treat.y, Configuration.y, Color.code.y,
#              stan_nflo.y, stan_nflochang.y, stan_nouts.y, stan_nins.y))%>%
#   group_by(ID..) %>%
#   mutate_all(funs(multmut))
#
# ff$treat.num <- as.numeric(ff$treat) - 1
#
setwd("C:/Users/KWJ/Dropbox/FF_fear and foraging/Personality exp_Data/Personality exp_latency")
lat <- read.csv("latency.csv", sep = ",")
lat <- lat %>% mutate(VideoID = substr(RecID, 38, 60)) %>%
rename(ID.. = NoID)
ff <- ff %>% mutate(VideoID = substr(Video.cut, 38, 60))
ff_lat <- left_join(ff, lat, by = c("VideoID", "ID.."))
cog <- read.csv("C:/Users/KWJ/Dropbox/FF_fear and foraging/Cognition data subset for Kasia sep-17.csv")
cog_means <- cog %>% group_by(ID) %>%
summarise(cog.mean = mean(cog.score)) %>%
rename(ID.. = ID)
pers_means_ctrl <- ff_lat %>%
filter(ConfSimpl == "Ctr") %>%
group_by(ID..) %>%
summarise(fer.mean = mean(mov_feroc),
exp.mean = mean(stan_nflo),
lat.mean = mean(Latency))
cog_pers <- left_join(cog_means, pers_means_ctrl, by = "ID..")
library(openxlsx)
write.xlsx(ff, "C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx",
append = TRUE)
write.xlsx(ff_lat, "C:/Users/KWJ/Dropbox/FF_fear and foraging/ff_lat.xlsx",
append = TRUE)
write.xlsx(cog_pers, "C:/Users/KWJ/Dropbox/FF_fear and foraging/cog_pers.xlsx",
append = TRUE)
library(readr)
ff <- readr_excel("C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx")
library(readxl)
ff <- readr_excel("C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx")
ff <- read_excel("C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx")
rm(list = ls())
ff <- read_excel("C:/Users/KWJ/Dropbox/FF_fear and foraging/ff.xlsx")
ff_lat <- read_excel("C:/Users/KWJ/Dropbox/FF_fear and foraging/ff_lat.xlsx")
cog_pers <- read_excel("C:/Users/KWJ/Dropbox/FF_fear and foraging/cog_pers.xlsx")
cm <- ff_lat[, c("stan_nflo", "Latency", "mov_feroc", "for_eff")]
cm <- cm[complete.cases(cm),]
cm_corr <- cor(cm)
corrplot::corrplot.mixed(cm_corr)
# Some data tuning
# Standardizing the arousal
ff <- ff %>% mutate(mov_feroc_stand = mov_feroc/nflo_chang)
ff_lat <- ff_lat %>% mutate(mov_feroc_stand = mov_feroc/nflo_chang)
cm <- ff_lat[, c("stan_nflo", "Latency", "mov_feroc_stand", "for_eff")]
cm <- cm[complete.cases(cm),]
cm_corr <- cor(cm)
corrplot::corrplot.mixed(cm_corr)
ff_lat
names(ff_lat)
cm <- ff_lat[, c("stan_nflo", "Latency", "mov_feroc_stand", "for_eff")]
cm
cm <- ff_lat[, c("stan_nflo", "Latency", "mov_feroc", "mov_feroc_stand", "for_eff")]
cm
cm <- ff_lat[, c("stan_nflo", "Latency", "nflo_chang", "mov_feroc", "mov_feroc_stand", "for_eff")]
cm
ff <- ff %>% mutate(mov_feroc_stand = mov_feroc/(nflo_chang+1))
ff_lat <- ff_lat %>% mutate(mov_feroc_stand = mov_feroc/(nflo_chang+1))
cm <- ff_lat[, c("stan_nflo", "Latency", "nflo_chang", "mov_feroc", "mov_feroc_stand", "for_eff")]
cm
cm <- ff_lat[, c("stan_nflo", "Latency", "mov_feroc_stand", "for_eff")]
cm
cm <- cm[complete.cases(cm),]
cm_corr <- cor(cm)
corrplot::corrplot.mixed(cm_corr)
cm <- ff_lat[, c("stan_nflo", "Latency", "mov_feroc_stand")]
cm <- cm[complete.cases(cm),]
cm_corr <- cor(cm)
corrplot::corrplot.mixed(cm_corr)
modelall_ctr <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff[ff$treat == "Ctr", ], REML = FALSE)
modelall_ctr <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr)
modelall_exp <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr)
modelall_exp <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp", ], REML = FALSE)
summary(modelall_exp)
library(rgl)
data <- iris
mycolors <- c('royalblue1', 'darkcyan', 'oldlace')
data$color <- mycolors[ as.numeric(data$Species) ]
par(mar=c(0,0,0,0))
plot3d(
x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`,
col = data$color,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
writeWebGL( filename="HtmlWidget/3dscatter.html" ,  width=600, height=600)
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
type = 's',
radius = .5,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
type = 'l',
radius = .5,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
type = 'p',
radius = .5,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
type = 's',
radius = .5,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
persp3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
persp3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
par(mar=c(0,0,0,0))
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
par(mar=c(0,0,0,0))
plot3d(
x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff,
type = "s",
radius = 0.5,
xlab="arousal", ylab="exploration", zlab="risk-avoidance")
library(plotly)
# volcano is a numeric matrix that ships with R
p <- plot_ly(z = ~volcano) %>% add_surface
p
volcano
names(volcano)
names(volcano)
head(volcano)
z
plot_ly(x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=ff_lat$Latency,
col = ff_lat$for_eff) %>% add_surface
plot_ly(x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency),
col = ff_lat$for_eff) %>% add_surface
plot_ly(x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency) %>% add_surface
plot_ly(x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency)) %>% add_surface
plot_ly(x=ff_lat$mov_feroc_stand, y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency)) %>% add_surface
plot_ly(x=(as.marix(ff_lat$mov_feroc_stand), y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency)) %>% add_surface
plot_ly(x=as.marix(ff_lat$mov_feroc_stand), y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency)) %>% add_surface
plot_ly(x=as.matrix(ff_lat$mov_feroc_stand), y=ff_lat$stan_nflo, z=as.matrix(ff_lat$Latency)) %>% add_surface
plot_ly(x=as.matrix(ff_lat$mov_feroc_stand), y=as.matrix(ff_lat$stan_nflo), z=as.matrix(ff_lat$Latency)) %>% add_surface
p <- plot_ly(x=as.matrix(ff_lat$mov_feroc_stand), y=as.matrix(ff_lat$stan_nflo), z=as.matrix(ff_lat$Latency)) %>% add_surface
p
p <- plot_ly(x=as.matrix(ff_lat$mov_feroc_stand), y=as.matrix(ff_lat$stan_nflo), z=as.matrix(ff_lat$Latency), col = ff_lat$for_eff) %>% add_surface
p
ff_ctr <- ff_lat %>% filter(treat == "Ctr")
p <- plot_ly(x=as.matrix(ff_ctr$mov_feroc_stand), y=as.matrix(ff_ctr$stan_nflo), z=as.matrix(ff_ctr$Latency)) %>% add_surface
p
p <- plot_ly(x=ff_ctr$mov_feroc_stand, y=ff_ctr$stan_nflo, z=as.matrix(ff_ctr$Latency)) %>% add_surface
p
ff_ctr$mov_feroc_stand
ff_ctr$stan_nflo
as.matrix(ff_ctr$Latency
as.matrix(ff_ctr$Latency)
as.matrix(ff_ctr$Latency)
p <- plot_ly(data = ff_ctr, x=mov_feroc_stand, y=stan_nflo)
ff_ctr <- ff_lat %>% filter(treat == "Ctr")
p <- plot_ly(data = ff_ctr, x=mov_feroc_stand, y=stan_nflo)
p <- plot_ly(data = ff_ctr, x = ~mov_feroc_stand, y = ~stan_nflo)
p
p <- plot_ly(data = ff_ctr, x = ~mov_feroc_stand, y = ~stan_nflo, z = ~Latency)
p
p <- scatter3d(data = ff_ctr, x = ~mov_feroc_stand, y = ~stan_nflo, z = ~Latency)
p <- car::scatter3d(data = ff_ctr, x = ~mov_feroc_stand, y = ~stan_nflo, z = ~Latency)
p
p <- car::scatter3d(data = ff_ctr, x = mov_feroc_stand, y = stan_nflo, z = Latency)
p <- car::scatter3d(data = ff_ctr, x = ~mov_feroc_stand, y = ~stan_nflo, z = ~Latency)
library(car)
p <- scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency)
p <- scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
group = ff_ctr$for_eff)
p <- scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
col = ff_ctr$for_eff)
p <- identify3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
col = ff_ctr$for_eff)
p <- identify3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
group = ff_ctr$for_eff)
p <- identify3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
groups = ff_ctr$for_eff)
p <- identify3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency)
p <- scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency)
scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
grid = FALSE)
p <- scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
fill = ff_ctr$for_eff)
scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
fill = ff_ctr$for_eff)
scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
surface.col = ff_ctr$for_eff)
scatter3d(x = ff_ctr$mov_feroc_stand,
y = ff_ctr$stan_nflo,
z = ff_ctr$Latency,
surface.col = as.factor(ff_ctr$for_eff))
modelall_ctr <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr)
modelall_ctr3_lat <- lmer(for_eff ~ mov_feroc_stand + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr3_lat)
modelall_ctr3_flo <- lmer(for_eff ~ mov_feroc_stand + Latency  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr3_flo)
modelall_ctr3 <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr3)
pchisq(logLik(modelall_ctr3) - logLik(modelall_ctr3_mov), 1)
modelall_ctr3_mov <- lmer(for_eff ~ Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr3_mov)
pchisq(logLik(modelall_ctr3) - logLik(modelall_ctr3_mov), 1)
1 - pchisq(logLik(modelall_ctr3) - logLik(modelall_ctr3_mov), 1)
1 - pchisq(logLik(modelall_ctr3) - logLik(modelall_ctr3_lat), 1)
modelall_ctr3_flo <- lmer(for_eff ~ mov_feroc_stand + Latency  + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr", ], REML = FALSE)
summary(modelall_ctr3_flo)
1 - pchisq(logLik(modelall_ctr3) - logLik(modelall_ctr3_flo), 1)
modelall_exp3 <- lmer(for_eff ~ mov_feroc_stand + Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp", ], REML = FALSE)
summary(modelall_exp3)
modelall_exp3_mov <- lmer(for_eff ~ Latency + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp", ], REML = FALSE)
summary(modelall_exp3_mov)
1 - pchisq(logLik(modelall_exp3) - logLik(modelall_exp3_mov), 1)
modelall_exp3_lat <- lmer(for_eff ~ mov_feroc_stand + stan_nflo  + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp", ], REML = FALSE)
summary(modelall_exp3_lat)
1 - pchisq(logLik(modelall_exp3) - logLik(modelall_exp3_lat), 1)
modelall_exp3_flo <- lmer(for_eff ~ mov_feroc_stand + Latency  + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp", ], REML = FALSE)
summary(modelall_exp3_flo)
1 - pchisq(logLik(modelall_exp3) - logLik(modelall_exp3_flo), 1)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff[ff$stan_nflo<0.5,], REML = FALSE)
summary(model.explr)
model.explr_fix <- lm(for_eff ~ treat *  stan_nflo, data = ff)
anova(model.explr, model.explr_fix)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff[ff$stan_nflo<0.5,], REML = FALSE)
model.explr_fix <- lm(for_eff ~ treat *  stan_nflo, data = ff)
anova(model.explr, model.explr_fix)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.explr)
model.explr_fix <- lm(for_eff ~ treat *  stan_nflo, data = ff_lat)
anova(model.explr, model.explr_fix)
ggplot(aes(y  = for_eff , x = stan_nflo), data = ff_lat) +
facet_wrap(~ treat, scales = "free_x") +
geom_point() +
labs(x = "Explorative behavior (# visited feeders/total foraging duration)", y =  "Foraging efficiency") +
geom_smooth(method = "lm") +
theme_classic()
model.explr_ctr <- lmer(for_eff ~ stan_nflo + (1 | ID..), data = ff[ff$treat == "Ctr",], REML = FALSE)
summary(model.explr_ctr)
model.explr_exp <- lmer(for_eff ~ stan_nflo + (1 | ID..), data = ff[ff$treat == "Exp" | ff$stan_nflo < 0.5,], REML = FALSE)
summary(model.explr_exp)
fft <- ff %>% group_by(ID.., treat) %>%
summarise (mstan_nflo = mean(stan_nflo)) %>%
spread(key = treat, value = mstan_nflo, NA) %>%
remove_missing() %>%
gather(key = treat, value = mstan_nflo, -ID..)
fft <- droplevels(fft)
x11()
ggplot(aes(y  = mstan_nflo , x = treat, group = as.character(ID..)), data = fft) +
geom_line() +
labs(x = "treatment", y =  "# visited feeders") +
theme_classic()
x11()
ggplot(aes(y  = mstan_nflo , x = treat, group = as.character(ID..)), data = fft) +
geom_line() +
labs(x = "treatment", y =  "# visited feeders") +
theme_classic()
ggplot(aes(y  = stan_flo , x = treat, col = as.character(ID..)), data = ff_lat)   geom_point() +
geom_line()
ggplot(aes(y  = stan_flo , x = treat, col = as.character(ID..)), data = ff_lat)   geom_point() +
geom_line()
ggplot(aes(y  = stan_flo , x = treat, col = as.character(ID..)), data = ff_lat)   geom_point()
ggplot(data = ff_lat, aes(y  = stan_flo , x = treat, col = as.character(ID..))) +
geom_point()
ggplot(data = ff_lat, aes(y  = stand_flo , x = treat, col = as.character(ID..))) +
geom_point()
ggplot(data = ff_lat, aes(y  = stan_nflo , x = treat, col = as.character(ID..))) +
geom_point()
ggplot(data = ff_lat, aes(y  = stan_nflo , x = treat, col = as.character(ID..))) +
geom_point() +  geom_line()
ggplot(data = ff_lat, aes(y  = stan_nflo , x = treat, group = as.character(ID..))) +
geom_point() +  geom_line()
ggplot(data = ff_lat, aes(y  = mov_feroc_stand , x = treat, group = as.character(ID..))) +
geom_point() +  geom_line()
model.explr_exp <- lmer(for_eff ~ stan_nflo + (1 | ID..), data = ff[ff$treat == "Exp" | ff$stan_nflo < 0.5,], REML = FALSE)
summary(model.explr_exp)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.explr)
anova(model.explr)
summary(model.explr)
tidy(model.explr)
dplyr::tidy(model.explr)
brood::tidy(model.explr)
broom::tidy(model.explr)
model.explr <- lm(for_eff ~ treat *  stan_nflo, data = ff_lat)
broom::tidy(model.explr)
summary(model.explr)
model.explr <- lm(for_eff ~ treat *  stan_nflo + ID.., data = ff_lat)
summary(model.explr)
model.explr <- lm(for_eff ~ treat *  stan_nflo * ID.., data = ff_lat)
summary(model.explr)
model.explr <- lm(for_eff ~ treat *  stan_nflo + ID.., data = ff_lat)
summary(model.explr)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.explr)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.explr)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.explr)
model.explr <- lm(for_eff ~ treat *  stan_nflo + ID.., data = ff_lat)
summary(model.explr)
broom::tidy(model.explr)
odel.explr <- lm(for_eff ~ treat *  stan_nflo + as.factor(ID..), data = ff_lat)
summary(model.explr)
broom::tidy(model.explr)
model.explr <- lm(for_eff ~ treat *  stan_nflo + as.factor(ID..), data = ff_lat)
summary(model.explr)
broom::tidy(model.explr)
model.explr_ctr <- lmer(for_eff ~ stan_nflo + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr",], REML = FALSE)
summary(model.explr_ctr)
model.explr <- lmer(for_eff ~ treat *  stan_nflo + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.explr)
model.explr_exp <- lmer(for_eff ~ stan_nflo + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp", ], REML = FALSE)
summary(model.explr_exp)
model.explr_ctr <- lmer(for_eff ~ stan_nflo + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr",], REML = FALSE)
summary(model.explr_ctr)
model.risk.lat <- lmer(for_eff ~ treat *  Latency + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.risk.lat)
ggplot(aes(y  = for_eff , x = Latency), data = ff_lat) +
facet_wrap(~ treat) +
geom_point() +
labs(x = "Risk avoidance (latency)", y =  "Foraging efficiency") +
geom_smooth(method = "lm") +
theme_classic()
ggplot(aes(y  = for_eff , x = Latency), data = ff_lat) +
facet_wrap(~ treat, scales = "free.x") +
geom_point() +
labs(x = "Risk avoidance (latency)", y =  "Foraging efficiency") +
geom_smooth(method = "lm") +
theme_classic()
ggplot(aes(y  = for_eff , x = Latency), data = ff_lat) +
facet_wrap(~ treat, scales = "free_x") +
geom_point() +
labs(x = "Risk avoidance (latency)", y =  "Foraging efficiency") +
geom_smooth(method = "lm") +
theme_classic()
model.risk.lat <- lmer(for_eff ~ treat *  Latency + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.risk.lat)
model.risk.lat <- lmer(for_eff ~ treat *  Latency + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.risk.lat)
model.arous <- lmer(for_eff ~ treat * mov_feroc_stand + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.arous)
ggplot(aes(y  = for_eff ,
x = mov_feroc_stand),
data = ff_lat) +
facet_wrap(~ treat) +
geom_point() +
labs(x = "Arousal (coeficient variance of deviations from the feeders/number of feeder changes)", y =  "Foraging efficiency") +
geom_smooth(method = "lm") +
theme_classic()
model.arous <- lmer(for_eff ~ treat * mov_feroc_stand + (1 | ID..), data = ff_lat, REML = FALSE)
summary(model.arous)
model.arous_exp <- lmer(for_eff ~ treat *  stan_nflo, data = ff_lat[ff_lat$treat == "Exp",], REML = FALSE)
summary(model.arous_exp)
model.arous_exp <- lmer(for_eff ~ mov_feroc_stand + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp",], REML = FALSE)
summary(model.arous_exp)
model.arous_ctr <- lmer(for_eff ~ mov_feroc_stand + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr",], REML = FALSE)
summary(model.arous_ctr)
model.arous_exp <- lmer(for_eff ~ mov_feroc_stand + (1 | ID..), data = ff_lat[ff_lat$treat == "Exp",], REML = FALSE)
summary(model.arous_exp)
model.arous_ctr <- lmer(for_eff ~ mov_feroc_stand + (1 | ID..), data = ff_lat[ff_lat$treat == "Ctr",], REML = FALSE)
summary(model.arous_ctr)
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
geom_boxplot()
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
geom_violin()
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
geom_violin() + geom_point()
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
geom_boxplot()
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE)
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE) summary(foreff_model)
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE) summary(foreff_model)
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE)
summary(foreff_model)
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE) foreff_model_fix <- lmer(for_eff ~ treat, data = ff_lat, REML = FALSE)
foreff_model_fix <- lmer(for_eff ~ treat, data = ff_lat, REML = FALSE)
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE) foreff_model_fix <- lm(for_eff ~ treat, data = ff_lat)
foreff_model_fix <- lm(for_eff ~ treat, data = ff_lat)
anova(foreff_model, foreff_model_fix)
ggplot(data = ff_lat, aes(x = treat, y = for_eff, col = as.factor(ID..))) +
geom_point()
ggplot(data = ff_lat, aes(x = treat, y = for_eff, col = as.factor(ID..))) +
geom_point() + geom_line()
ggplot(data = ff_lat, aes(x = treat, y = for_eff, group = as.factor(ID..))) +
geom_point() + geom_line()
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
geom_point() + geom_line(aes(group = as.factor(ID..)))
foreff_long <- ff_lat %>% group_by(ID.., treat) %>%
summarise (mfor_eff = mean(for_eff)) %>%
spread(key = treat, value = mfor_eff, NA) %>%
remove_missing() %>%
gather(key = treat, value = mfor_eff, -ID..)
foreff_long
ggplot(data = foreff_long, aes(x = treat, y = for_eff)) +
geom_point() + geom_line(aes(group = as.factor(ID..)))
ggplot(data = foreff_long, aes(x = treat, y = mfor_eff)) +
geom_point() + geom_line(aes(group = as.factor(ID..)))
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
facet_wrap(~ ID..) +
geom_boxplot()
ggplot(data = foreff_long, aes(x = treat, y = mfor_eff)) +
geom_point() + geom_line(aes(group = as.factor(ID..)))
foreff_model <- lmer(for_eff ~ treat  + (1 | ID..), data = ff_lat, REML = FALSE)
summary(foreff_model)
foreff_model_fix <- lm(for_eff ~ treat, data = ff_lat)
anova(foreff_model, foreff_model_fix)
ggplot(data = ff_lat, aes(x = treat, y = for_eff)) +
geom_boxplot()
